!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/mcc/code/infex/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
Geometry	src/include/state.h	/^struct Geometry {$/;"	s
INFEX_DRAW_H	src/include/draw.h	/^#define INFEX_DRAW_H$/;"	d
INFEX_SCREEN	src/include/state.h	/^enum INFEX_SCREEN {$/;"	g
INFEX_SCREEN_GAME	src/include/state.h	/^    INFEX_SCREEN_GAME,$/;"	e	enum:INFEX_SCREEN
INFEX_SCREEN_NONE	src/include/state.h	/^    INFEX_SCREEN_NONE,$/;"	e	enum:INFEX_SCREEN
INFEX_SCREEN_TITLE	src/include/state.h	/^    INFEX_SCREEN_TITLE,$/;"	e	enum:INFEX_SCREEN
INFEX_STATE_H	src/include/state.h	/^#define INFEX_STATE_H$/;"	d
INFEX_WORLD_H	src/include/world.h	/^#define INFEX_WORLD_H$/;"	d
State	src/include/state.h	/^struct State {$/;"	s
WORLD_HEIGHT_INITIAL_STEP	src/world.c	/^#define WORLD_HEIGHT_INITIAL_STEP /;"	d	file:
WORLD_HEIGHT_MAX	src/world.c	/^#define WORLD_HEIGHT_MAX /;"	d	file:
World	src/include/world.h	/^struct World {$/;"	s
cols	src/include/world.h	/^    size_t rows, cols;$/;"	m	struct:World	typeref:typename:size_t
draw_map	src/draw.c	/^void draw_map(struct State *state)$/;"	f	typeref:typename:void
draw_screen	src/draw.c	/^void draw_screen(struct State *state)$/;"	f	typeref:typename:void
draw_screen_game	src/draw.c	/^void draw_screen_game(struct State *state)$/;"	f	typeref:typename:void
draw_screen_none	src/draw.c	/^void draw_screen_none(struct State *state)$/;"	f	typeref:typename:void
draw_screen_title	src/draw.c	/^void draw_screen_title(struct State *state)$/;"	f	typeref:typename:void
draw_terrain_tile	src/draw.c	/^void draw_terrain_tile(int x, int y, uint8_t h)$/;"	f	typeref:typename:void
geometry	src/include/state.h	/^    struct Geometry geometry;$/;"	m	struct:State	typeref:struct:Geometry
height	src/include/world.h	/^    uint8_t *height;$/;"	m	struct:World	typeref:typename:uint8_t *
hex_delta_height_px	src/include/state.h	/^    unsigned int hex_radius_px, hex_delta_width_px, hex_delta_height_px;$/;"	m	struct:Geometry	typeref:typename:unsigned int
hex_delta_width_px	src/include/state.h	/^    unsigned int hex_radius_px, hex_delta_width_px, hex_delta_height_px;$/;"	m	struct:Geometry	typeref:typename:unsigned int
hex_radius_px	src/include/state.h	/^    unsigned int hex_radius_px, hex_delta_width_px, hex_delta_height_px;$/;"	m	struct:Geometry	typeref:typename:unsigned int
main	src/main.c	/^int main(void)$/;"	f	typeref:typename:int
rows	src/include/world.h	/^    size_t rows, cols;$/;"	m	struct:World	typeref:typename:size_t
screen_curr	src/include/state.h	/^    enum INFEX_SCREEN screen_curr;$/;"	m	struct:State	typeref:enum:INFEX_SCREEN
screen_height_px	src/include/state.h	/^    unsigned int screen_width_px, screen_height_px;$/;"	m	struct:Geometry	typeref:typename:unsigned int
screen_width_px	src/include/state.h	/^    unsigned int screen_width_px, screen_height_px;$/;"	m	struct:Geometry	typeref:typename:unsigned int
state_update	src/state.c	/^void state_update(struct State *state)$/;"	f	typeref:typename:void
world	src/include/state.h	/^    struct World *world;$/;"	m	struct:State	typeref:struct:World *
world_create	src/world.c	/^struct World *world_create(size_t rows, size_t cols)$/;"	f	typeref:struct:World *
